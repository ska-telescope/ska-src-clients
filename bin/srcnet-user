#!/usr/bin/env python

import argparse
import json

from ska_src_clients.session.oidc import OIDCSession

SESSION = OIDCSession(
    authn_api_url='https://authn.srcdev.skao.int/api/v1'
)
SESSION.load_tokens_from_disk()


def add_args_for_token_exchange(token_parser_subparsers):
    token_exchange_parser = token_parser_subparsers.add_parser("exchange")
    token_exchange_parser.add_argument('service')
    token_exchange_parser.add_argument('-v', help="version", type=str, default='latest')


def add_args_for_token_get(token_parser_subparsers):
    token_get_parser = token_parser_subparsers.add_parser("get")
    token_get_parser.add_argument('service')


def add_args_for_token_ls(token_parser_subparsers):
    token_get_parser = token_parser_subparsers.add_parser("ls")


def add_args_for_token_request(token_parser_subparsers):
    token_get_parser = token_parser_subparsers.add_parser("request")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='The user CLI for SRCNet', dest='command')

    token_parser = subparsers.add_parser("token")
    token_parser_subparsers = token_parser.add_subparsers(help="token operations", dest='subcommand')

    # exchange
    add_args_for_token_exchange(token_parser_subparsers)

    # get
    add_args_for_token_get(token_parser_subparsers)

    # ls
    add_args_for_token_ls(token_parser_subparsers)

    # request
    add_args_for_token_request(token_parser_subparsers)

    args = parser.parse_args()

    if args.command == 'token':
        if args.subcommand == 'exchange':
            SESSION.exchange_token(service=args.service, version=args.v)
        elif args.subcommand == 'get':
            access_token = SESSION.get_token(service=args.service)
            if access_token:
                print(access_token)
            else:
                print("Token for service {} not found.".format(args.service))
        elif args.subcommand == 'ls':
            SESSION.list_tokens()
        elif args.subcommand == 'request':
            print("Please log in to: {}".format(SESSION.get_login_url()))
            authorisation_code = input("Enter the authorisation code: ")
            state = input("Enter the state here: ")
            SESSION.request_token(code=authorisation_code, state=state)
        else:
            print(token_parser.print_help())
    else:
        print(parser.print_help())
        exit()